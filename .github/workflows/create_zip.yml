name: Create Kodi Plugin Zip (No Version in Name)

on:
  release:
    types: [published, edited] # This ensures it runs ONLY when a release is pushed
  workflow_dispatch: # This adds the "Run workflow" button in the GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Addon ID
        id: get_addon_id
        run: |
          # Extract addon ID from addon.xml (still necessary for zip naming)
          ADDON_ID=$(grep -oP 'id="\K[^"]+' addon.xml)
          echo "Addon ID: $ADDON_ID"
          echo "ADDON_ID=$ADDON_ID" >> $GITHUB_OUTPUT
        working-directory: ./ # Correct, as addon.xml is in root

      - name: Create Plugin Zip
        run: |
          ADDON_ID="${{ steps.get_addon_id.outputs.ADDON_ID }}"
          ZIP_FILENAME="$ADDON_ID.zip" # Zip filename is now just addon_id.zip

          # Create a temporary directory to build the zip from
          TEMP_DIR="./$ADDON_ID"
          mkdir -p "$TEMP_DIR"

          # Copy all plugin files into the temporary directory
          # Exclude .git and .github folders, and any existing zip files
          rsync -av --exclude '.git/' --exclude '.github/' --exclude '*.zip' . "$TEMP_DIR"

          # Zip the plugin, ensuring the addon ID is the root folder inside the zip
          zip -r "$ZIP_FILENAME" "$TEMP_DIR"

          # The 'mv' command is removed here as it's no longer needed.
          # The zip file is already created in the working directory (./).

          # Clean up the temporary directory
          rm -rf "$TEMP_DIR"
        working-directory: ./ # This ensures the zip is created in the repo root

      - name: Upload Plugin Zip as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_addon_id.outputs.ADDON_ID }}-build # Artifact name is just addon_id-build
          path: ${{ steps.get_addon_id.outputs.ADDON_ID }}.zip
          # retention-days: 7 # Optional: Keep artifact for 7 days
